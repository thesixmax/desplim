% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/desplim_connect_border.R
\name{desplim_connect_border}
\alias{desplim_connect_border}
\title{Connect a \code{sf} LINESTRING object to border nodes of an \code{sf} POLYGON object}
\usage{
desplim_connect_border(
  input_linestring,
  input_polygon,
  input_buildings = NULL,
  distance_intersect = 500,
  distance_nodes = 250,
  minimum_angle = 30,
  num_candidates = 3
)
}
\arguments{
\item{input_linestring}{object of class sf of type LINESTRING or
MULTILINESTRING.}

\item{input_polygon}{object of class sf of type POLYGON.}

\item{input_buildings}{object of class sf of type POLYGON or MULTIPOLYGON.
Contains elements which should not overlap with output border connetions.
Default is \code{NULL}.}

\item{distance_intersect}{numerical; the minimum distance from exsting
intersections of \code{input_linestring} and the border of \code{input_polygon} for a
border node of \code{input_polygon} to be considered for a new connection. Default
is 500 units.}

\item{distance_nodes}{numerical; maximum distance from the border nodes of
\code{input_polygon} to for a node of \code{input_linestring} to be considered for a
new connection. Default is 250 units.}

\item{minimum_angle}{numerical; minimum angle between a new connection and
the border of \code{input_polygon} required for the new connection to be c
onsidered. Default is 30 degrees.}

\item{num_candidates}{numerical; number of connections to attempt for each
border node. Default is 3.}
}
\value{
An sf object of type LINESTRING connecting nodes in
\code{input_linestring} to border nodes of \code{input_polygon}.
}
\description{
Compute the optimal connections between nodes of a \code{sf}
LINESTRING object and border nodes of a \code{sf} POLYGON object based on user
input.
}
\details{
For each candidate border node, \code{num_candidates} candidate
connections are generated. Only candidate connections which meet the
requirements of \code{minimum_angle}, are fully covered by the input polygon and
do not cross any existing linestrings are selected. The border node closest
to an existing intersection is considered first. If more than one valid
connection for the border node is found, the shortest connection is selected
and the set of other candidate border nodes is updated to exclude those who
are within \code{distance_intersect} of the new connection. If no valid connection
for the border node exist, the border node is removed from the set of
candidate border nodes.
}
